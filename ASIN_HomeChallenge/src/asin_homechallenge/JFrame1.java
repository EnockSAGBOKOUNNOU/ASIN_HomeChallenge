/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package asin_homechallenge;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Arrays;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author EnockSKY
 */
public class JFrame1 extends javax.swing.JFrame {

    /**
     * Creates new form JFrame1
     */
    public JFrame1() {
        this.setUndecorated(true);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Sélectionner le fichier csv");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Extraire les données du fichier");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(298, 298, 298))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 521, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(382, 382, 382)
                        .addComponent(jLabel1)))
                .addContainerGap(179, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 122, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
     private String chemBonCom; // Chemin du fichier sélectionné
     private boolean fichierSelectionned = false; // Indique si un fichier a été sélectionné
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         // Crée un JFileChooser pour choisir un fichier CSV
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Sélectionner un fichier CSV");
    
    // Filtrer uniquement les fichiers CSV
    fileChooser.setFileFilter(new FileNameExtensionFilter("Fichiers CSV", "csv", "CSV")); 

    int result = fileChooser.showOpenDialog(this);
    if (result == JFileChooser.APPROVE_OPTION) {
        File selectedFile = fileChooser.getSelectedFile();
        chemBonCom = selectedFile.getAbsolutePath();
        fichierSelectionned = true;
        jButton1.setText(selectedFile.getName()); // Met à jour le texte du bouton avec le nom du fichier
    } else {
        fichierSelectionned = false; // Aucun fichier sélectionné
        chemBonCom = null;
        jButton1.setText(""); // Efface le texte du bouton
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    
  // Méthode pour valider que le fichier est un CSV
    private boolean isValidCSVFile(File file) {
        String filePath = file.getAbsolutePath().toLowerCase();
        return filePath.endsWith(".csv");
    }
      // Méthode pour compter le nombre de lignes dans un fichier CSV
    private int countRowsInCSV(File csvFile) {
        int rowCount = 0;

        try (BufferedReader br = new BufferedReader(new FileReader(csvFile))) {
            String line;
            while ((line = br.readLine()) != null) {
                rowCount++;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        return rowCount;
    }
    
       // Méthode pour insérer les données du CSV dans la base de données avec affichage du pourcentage dans jLabel1
private void insertCSVDataToDatabase(final File csvFile) {
    new SwingWorker<Void, Integer>() {
        @Override
        protected Void doInBackground() throws Exception {
            String url = "jdbc:mysql://localhost:3306/db_fact"; // Remplacez par votre URL
            String user = "root"; // Remplacez par votre utilisateur MySQL
            String password = ""; // Remplacez par votre mot de passe MySQL

            String query = "INSERT INTO asin_table (matricule, nom, prenom, datedenaissance, status) VALUES (?, ?, ?, ?, ?)";
            
            try (Connection conn = DriverManager.getConnection(url, user, password);
                 PreparedStatement pstmt = conn.prepareStatement(query);
                 BufferedReader br = new BufferedReader(new FileReader(csvFile))) {

                conn.setAutoCommit(false); // Désactiver l'auto-commit
                
                // Calculer le nombre total de lignes du fichier
                int totalRows = countRowsInCSV(csvFile);
                int processedRows = 0;
                int count = 0;
                String line;
                
                while ((line = br.readLine()) != null) {
                    String[] values = line.split(";");
                    if (values.length == 5) {  // Vérification que la ligne contient bien 5 colonnes
                        pstmt.setString(1, values[0].trim());
                        pstmt.setString(2, values[1].trim());
                        pstmt.setString(3, values[2].trim());
                        pstmt.setString(4, values[3].trim());
                        pstmt.setString(5, values[4].trim());

                        pstmt.addBatch(); // Ajouter à un batch
                        count++;
                        processedRows++;

                        if (count % 1000 == 0) { // Insérer en lots de 1000
                            pstmt.executeBatch();
                            conn.commit();  // Commit après chaque lot
                            count = 0;
                        }
                    } else {
                        System.out.println("⚠ Ligne ignorée (format incorrect) : " + Arrays.toString(values));
                        processedRows++; // On incrémente même en cas de ligne incorrecte pour la progression
                    }
                    
                    // Calculer le pourcentage de progression et publier la valeur
                    int progress = (int)(((double) processedRows / totalRows) * 100);
                    publish(progress);
                }

                // Exécuter les requêtes restantes et commit final
                pstmt.executeBatch();
                conn.commit();
                
            } catch (IOException | SQLException e) {
                System.out.println("Erreur lors de l'insertion des données : " + e.getMessage());
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Erreur lors de l'insertion des données dans la base.", "Erreur", JOptionPane.ERROR_MESSAGE);
            }
            return null;
        }

        @Override
        protected void process(java.util.List<Integer> chunks) {
            // Met à jour jLabel1 avec le dernier pourcentage reçu
            int lastProgress = chunks.get(chunks.size() - 1);
            jLabel1.setText("Progression : " + lastProgress + "%");
        }

        @Override
        protected void done() {
            JOptionPane.showMessageDialog(null, "Insertion terminée avec succès !");
            jLabel1.setText("Insertion terminée !");
        }
    }.execute(); // Lancer le SwingWorker
}

    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         // TODO add your handling code here:
          // Vérifier que le fichier est bien un fichier CSV
        if (fichierSelectionned && chemBonCom != null) {
                // Convertir le chemin (String) en objet File
                File file = new File(chemBonCom);

                // Vérifier que le fichier est bien un fichier CSV
                if (!isValidCSVFile(file)) {
                    JOptionPane.showMessageDialog(this, "Veuillez sélectionner un fichier CSV (.csv).", "Erreur", JOptionPane.WARNING_MESSAGE);
                    return;
                }

                // Appeler la méthode pour compter les lignes
                int rowCount = countRowsInCSV(file);

                // Afficher le nombre d'enregistrements dans une fenêtre de message
                JOptionPane.showMessageDialog(this, "Nombre d'enregistrements dans le fichier : " + rowCount);
                
                // Insérer les données du CSV dans la base de données
                insertCSVDataToDatabase(file);
            
            } else {
                // Afficher un message d'erreur si aucun fichier n'a été sélectionné
                JOptionPane.showMessageDialog(this, "Veuillez d'abord sélectionner un fichier CSV.", "Erreur", JOptionPane.WARNING_MESSAGE);
            }
    }//GEN-LAST:event_jButton2ActionPerformed


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrame1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
